module Applicative
where

import std::functor::Functor

/// `Functor<f<_>>` with application.
///
/// The following laws should hold:
///
/// * `apply(wrap(id), v) == v`
/// * `apply(apply(apply(wrap(<<), u), v), w) == apply(u, apply(v, w))`
/// * `apply(wrap(f), wrap(x)) == wrap(f(x))`
/// * `apply(u, wrap(y)) == wrap (|g| => g(x)) <*> u`
trait Applicative<f<_>> where
    typevar f has Functor<f<_>>

    /// Similar to `Functor::map`
    /// but this time the supplied function `t1 -> t2` is embedded in `f`
    apply : f<(t1 -> t2)> -> f<t1> -> f<t2> where
      typevar t1
      typevar t2

    /// Wrap the supplied value into `f<_>`
    ///
    /// # Examples
    ///
    /// * `Applicative<Option<_>::wrap(1) == Some(1)`
    /// * `Applicative<Either<_, _>::wrap(1) == Right(1)`
    wrap : t1 -> f<t1> where
      typevar t1
