module Functor
where

--! `Functor` represents an action on a containerized type which does not change the structure with the mapped type.
--!
--! The following laws should hold:
--!
--! * `Functor::map(id) == id`
--! * `Functor::map(f << g) == Functor::map(f) << Functor::map(g)`
trait Functor where
  self = #Type[_]

  --! Apply the supplied function to the contents of `Self<t1>`, converting it to `Self<t2>`
  --!
  --! # Examples
  --!
  --! * `option.functor.map debug_Int.debug (Some 1) == Some "1"`
  --! * `result.functor.map debug_Int.debug (Some 1) == Ok "1"`
  --! * `list.functor.map debug_Int.debug (list.of [1, 2]) == list.of ["1", "2"]`
  --!
  typeof map : (t1 -> t2) -> self[t1] -> self[t2] where
    typevar t1
    typevar t2
end