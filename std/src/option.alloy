module Option
where

import std::eq::Eq
import std::order::Ord
import std::debug::Debug

--! `Option[t]` represents a value `t` which may not exist.
--! `Option[t]` requires a "concrete" type as a type argument
typedef Option[t] =
    | None
    | Some(t)
end

behavior Eq for Option[t] where
  typevar t = Eq

  typeof eq : Option[t] -> Option[t] -> Bool
  let eq = |left, right| ->
    match (left, right) when
      \ (Option::Some(l_val), Option::Some(r_val)) -> Eq::eq(l_val, r_val)
      \ (Option::None, Option::None)               -> True
      \ _                          -> False

end

behavior Ord for Option[t] where
  typevar t = Ord

  typeof compare : Option[t] -> Option[t] -> Ordering
  let compare = |left, right| ->
    match (left, right) when
      \ (Option::Some(l_val), Option::Some(r_val)) -> Ord::compare(l_val, r_val)
      \ (Option::None, Option::Some(_))            -> LT
      \ (Option::Some(_), Option::None)            -> GT
      \ (Option::None, Option::None)               -> EQ

end

behavior Debug for Option[t] where
  typevar t = Debug

  typeof debug : Option[t] -> String
  let debug = |op| ->
    match op when
      \ Option::Some(x) -> "Some(#{x})"
      \ Option::None    -> "None"

end

behavior Functor for Option[_] where

  typeof map : (t1 -> t2) -> Option[t1] -> Option[t2] where
    typevar t1
    typevar t2
  let map = |convert, x| -> match x when
    \ Option::Some(x_val) -> Option::Some(convert(x_val))
    \ Option::None        -> Option::None

end

behavior Applicative for Option[_] where

  typeof apply : Option[(t1 -> t2)] -> Option[t1] -> Option[t2] where
    typevar t1
    typevar t2
  let apply = |f, x| -> match (f, x) when
    \ (Option::Some(f_val), Option::Some(x_val)) -> Option::Some(f_val(x_val))
    \ _                          -> Option::None

end

  typeof wrap : t1 -> Option[t1] where
    typevar t1
  let wrap = |x| -> Option::Some(x)


behavior Monad for Option[_] where

  typeof flat_map : (t1 -> Option[t2]) -> Option[t1] -> Option[t2] where
    typevar t1
    typevar t2
  let flat_map = |convert, x| -> match x when
    \ Option::Some(x_val) -> convert(x_val)
    \ Option::None        -> Option::None

end
