module Ord
where

import std::bool::Bool
import std::eq::Eq
import std::function::(<|)

typedef Ordering =
  | LT
  | EQ
  | GT
end

--! `Ord` defines an ordering on `self`
--! Any `t` that behaves as `Ord` must also behave as `Eq`
trait Ord where
  self = Eq

  typeof compare : self -> self -> Ordering
end

typeof comparing : (t2 -> t1) -> t2 -> t2 -> Ordering where
  typevar t1 = Ord
  typevar t2
let comparing = |convert, x, y| -> Ord::compare <| (convert(x), convert(y))


--! Returns whether `left` is less than or equal to `right`.
typeof (<=) : t -> t -> Bool where
  typevar t = Ord
let (<=) = |left, right| -> match Ord::compare(left, right) when
  \ LT -> True
  \ EQ -> True
  \ GT -> False

--! Returns whether `left` is less than `right`.
typeof (<) : t -> t -> Bool where
  typevar t = Ord
let (<) = |left, right| -> match Ord::compare(left, right) when
  \ LT -> True
  \ EQ -> False
  \ GT -> False

--! Returns whether `left` is greater than `right`.
typeof (>) : t -> t -> Bool where
  typevar t = Ord
let (>) = |left, right| -> match Ord::compare(left, right) when
  \ LT -> False
  \ EQ -> False
  \ GT -> True

--! Returns whether `left` is greater than or equal to `right`.
typeof (>=) : t -> t -> Bool where
  typevar t = Ord
let (>=) = |left, right| -> match Ord::compare(left, right) when
  \ LT -> False
  \ EQ -> True
  \ GT -> True

--! Returns `left` if `left` is less than or equal to `right`, otherwise `right`.
typeof min : t -> t -> t where
  typevar t = Ord
let min = |left, right| ->
  if left <= right
  then left
  else right

--! Returns `left` if `left` is greater than or equal to `right`, otherwise `right`.
typeof max : t -> t -> t where
  typevar t = Ord
let max = |left, right| ->
  if left >= right
  then left
  else right
