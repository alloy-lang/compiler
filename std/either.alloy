module Either
where

import std::eq::Eq
import std::order::Ord
import std::debug::Debug
import std::functor::Functor
import std::applicative::Applicative
import std::monad::Monad

--! `Either` represents either right (`Right`) or left (`Left`)
typedef Either<l, r> =
    | Left(l)
    | Right(r)
end


behavior Eq for Either<l, r> where
  typevar l = Eq
  typevar r = Eq

  eq = |left, right| ->
    match (left, right) when
      | (Left(l_val), Left(r_val))   -> Eq::eq(l_val, r_val)
      | (Right(l_val), Right(r_val)) -> Eq::eq(l_val, r_val)
      | _ -> False
end


behavior Ord for Either<l, r> where
  typevar l = Ord
  typevar r = Ord

  compare = |left, right| ->
    match (left, right) when
      | (Right(l_val), Right(r_val)) -> Ord::compare(l_val, r_val)
      | (Left(l_val), Left(r_val))   -> Ord::compare(l_val, r_val)
      | (Right(_), Left(_))          -> LT
      | (Left(_), Right(_))          -> GT
end


behavior Debug for Either<l, r> where
  typevar l = Debug
  typevar r = Debug

  debug = |e| ->
    match e when
      | Left(x)  -> "Left(#{x})"
      | Right(x) -> "Right(#{x})"
end


behavior Functor for Either<l, _> where
  typevar l

  map : (r1 -> r2) -> Either<l, r1> -> Either<l, r2> where
    typevar r1
    typevar r2
  map = |convert, x| -> match x when
    | Right(x_val) -> Right(convert(x_val))
    | Left(x_val)  -> Left(x_val)
end


behavior Applicative for Either<l, _> where
  typevar l

  apply : Either<l, (r1 -> r2)> -> Either<l, r1> -> Either<l, r2> where
    typevar r1
    typevar r2
  apply = |f, x| -> match (f, x) when
    | (Right(f_val), Right(x_val)) -> Right(f_val(x_val))
    | (Right(_),     Left(x_val))  -> Left(x_val)
    | (Left(f_val),  _)            -> Left(f_val)


  wrap : r1 -> Either<l, r1> where
    typevar r1
  wrap = |x| -> Right(x)
end


behavior Monad for Either<l, _> where
  typevar l

  flat_map : (r1 -> Either<l, r2>) -> Either<l, r1> -> Either<l, r2> where
    typevar r1
    typevar r2
  flat_map = |convert, x| -> match x when
    | Right(x_val) -> convert(x_val)
    | Left(x_val)  -> Left(x_val)
end
