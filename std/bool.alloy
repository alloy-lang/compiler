module Bool
where

import std::eq::Eq
import std::order::Ord
import std::order::Ordering
import std::debug::Debug

typedef Bool =
  | False
  | True


/// Boolean 'not'
not : Bool -> Bool
not = |x| ->
  if x
  then False
  else True


/// Boolean 'exclusive or'
xor : Bool -> Bool -> Bool
xor = |x, y| ->
  if x
  then not(y)
  else y


behavior Eq for Bool where
  (==) = |left, right| ->
    if left
    then right
    else not(right)


behavior Ord for Bool where
  compare = |left, right| ->
    match (left, right) when
    | (True, True)   -> Ordering::EQ
    | (False, False) -> Ordering::EQ
    | (True, False)  -> Ordering::GT
    | (False, True)  -> Ordering::LT


behavior Debug for Bool where
  debug = |x| ->
    if x
    then "True"
    else "False"
