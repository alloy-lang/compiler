module Bool
where

import std::eq::Eq
import std::order::Ord
import std::order::Ordering
import std::show::Show

typedef Bool =
  | False
  | True

/// Boolean 'not'
not : Bool -> Bool
not = |x| =>
  if x
  then False
  else True

/// Boolean 'exclusive or'
xor : Bool -> Bool -> Bool
xor = |x, y| =>
  if x
  then not(y)
  else y


behavior Eq<Bool> where
  (==) = |left, right| =>
    if left
    then right
    else not(right)


behavior Ord<Bool> where
  compare = |left, right| =>
    if left
    then
      if right
      then Ordering::EQ
      else Ordering::GT
    else Ordering::LT


behavior Show<Bool> where
  show = |x| =>
    if x
    then "True"
    else "False"
