module Option
where

import std::eq::Eq
import std::ord::Ord
import std::show::Show

/// `Option` represents a value which may not exist.
typedef Option<t> =
    | None
    | Some(T)


behavior Eq<Option<t>> where
  typevar t has Eq<t>

  eq = |left, right| =>
    match (left, right) when
      | (Some(l_val), Some(r_val)) -> Eq::eq(l_val, r_val)
      | (None, None) -> True
      | _ -> False


behavior Ord<Option<t>> where
  typevar t has Ord<t>

  compare = |left, right| =>
    match (left, right) when
      | (Some(l_val), Some(r_val)) -> Ord::compare(l_val, r_val)
      | (None, Some(_)) -> LT
      | (Some(_), None) -> GT
      | (None, None) -> EQ


behavior Show<Option<t>> where
  typevar t has Show<t>

  show = |op| =>
    match op when
      | Some(x) -> "Some(" <> Show::show(x) <> ")"
      | None -> "None"
