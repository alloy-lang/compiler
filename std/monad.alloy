module Monad
where

import std::bool::Bool
import std::applicative::Applicative

--! A generalised trait for composing sequential actions
trait Monad where
  self = #Type<_> + Applicative

  --! This can be seen as akin to sequential variable binding in an
  --! imperative language. For example in Javascript:
  --!
  --! ```js
  --! var x = call_fallible("hello");
  --! do_something(x);
  --! ```
  --!
  --! In alloy this would look like:
  --!
  --! ```alloy
  --! import std::monad::Monad
  --! import std::option::Option
  --!
  --! call_fallible("hello")
  --!   |> Monad::flat_map(|x| => do_something(x))
  --! ```
  --!
  --! Note that it is sometimes more ergonomic to use the `(>>=)` operator:
  --!
  --! ```alloy
  --! import std::monad::(>>=)
  --!
  --! call_fallible("hello") >>= |x| => do_something(x)
  --! ```
  --!
  --! # Note
  --!
  --! * Known as `Option::and_then` and `Result::and_then` in Rust
  --! * Known as `flat_map` or `flatMap` in other languages
  flat_map : (a -> self<b>) -> self<a> -> self<b>


#[infix(right, 1)]
(=<<) : (t1 -> m<t2>) -> m<t1> -> m<t2> where
  typevar m = Monad
  typevar t1
  typevar t2
(=<<) = Monad::flat_map

#[infix(left, 1)]
(>>=) : m<t1> -> (t1 -> m<t2>) -> m<t2> where
  typevar m = Monad
  typevar t1
  typevar t2
(>>=) = |x, f| -> Monad::flat_map(f, x)


join : m (m<t1>) -> m<t1> where
  typevar m = Monad
  typevar t1
join = |mm| -> mm >>= |x| -> x


-- Kleisli composition
#[infix(right, 9)]
(<=<) : (t2 -> m<t3>) -> (t1 -> m<t2>) -> t1 -> m<t3> where
  typevar m = Monad
  typevar t1
  typevar t2
  typevar t3
(<=<) = |g, f, x| -> g =<< f(x)

#[infix(left, 9)]
(>=>) : (t1 -> m<t2>) -> (t2 -> m<t3>) -> t1 -> m<t3> where
  typevar m = Monad
  typevar t1
  typevar t2
  typevar t3
(>=>) = |f, g, x| -> f(x) >>= g
