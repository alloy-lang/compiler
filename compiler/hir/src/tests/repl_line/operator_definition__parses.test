import fake::fakeStuff

typeof (|>) : t1 -> (t1 -> t2) -> t2 where
    typevar t1
    typevar t2
let (|>) = |x, f| -> fakeStuff
===
HirModule {
    imports: Index::<Import> {
        Idx::<Import>(0): {
            "item": Import {
                segments: [
                    "fake",
                ],
                last: "fakeStuff",
            },
            "name": "fakeStuff",
            "range": 0..24,
            "scope_id": Idx::<Scope>(0),
        },
    },
    expressions: Index::<Expression> {
        Idx::<Expression>(0): {
            "item": VariableRef {
                name: ThisModule(
                    "fakeStuff",
                ),
            },
            "range": 118..127,
        },
        Idx::<Expression>(1): {
            "item": Lambda {
                args: [
                    Idx::<Pattern>(0),
                    Idx::<Pattern>(1),
                ],
                body: Idx::<Expression>(0),
            },
            "name": "(|>)",
            "range": 97..127,
            "scope_id": Idx::<Scope>(0),
        },
    },
    patterns: Index::<Pattern> {
        Idx::<Pattern>(0): {
            "item": VariableDeclaration {
                name: "x",
            },
            "name": "x",
            "range": 109..110,
            "scope_id": Idx::<Scope>(1),
        },
        Idx::<Pattern>(1): {
            "item": VariableDeclaration {
                name: "f",
            },
            "name": "f",
            "range": 112..113,
            "scope_id": Idx::<Scope>(1),
        },
    },
    type_references: Index::<TypeReference> {
        Idx::<TypeReference>(0): {
            "item": Named(
                ThisModule(
                    "t1",
                ),
            ),
            "range": 38..41,
        },
        Idx::<TypeReference>(1): {
            "item": Named(
                ThisModule(
                    "t1",
                ),
            ),
            "range": 45..48,
        },
        Idx::<TypeReference>(2): {
            "item": Named(
                ThisModule(
                    "t2",
                ),
            ),
            "range": 51..53,
        },
        Idx::<TypeReference>(3): {
            "item": Lambda {
                arg_type: Idx::<TypeReference>(1),
                return_type: Idx::<TypeReference>(2),
            },
            "range": 45..53,
        },
        Idx::<TypeReference>(4): {
            "item": ParenthesizedType(
                Idx::<TypeReference>(3),
            ),
            "range": 44..55,
        },
        Idx::<TypeReference>(5): {
            "item": Named(
                ThisModule(
                    "t2",
                ),
            ),
            "range": 58..61,
        },
        Idx::<TypeReference>(6): {
            "item": Lambda {
                arg_type: Idx::<TypeReference>(4),
                return_type: Idx::<TypeReference>(5),
            },
            "range": 44..61,
        },
        Idx::<TypeReference>(7): {
            "item": Lambda {
                arg_type: Idx::<TypeReference>(0),
                return_type: Idx::<TypeReference>(6),
            },
            "name": "(|>)",
            "range": 38..61,
            "scope_id": Idx::<Scope>(0),
        },
    },
    type_definitions: EmptyIndex::<TypeDefinition>,
    scopes: Scopes {
        current_scope: Idx::<Scope>(0),
        scopes: Arena {
            len: 2,
            data: [
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "root",
                },
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "lambda expression",
                },
            ],
        },
    },
    warnings: [],
    errors: [],
}
[]
