|(a, b)| -> a + b
===
HirModule {
    imports: EmptyIndex::<Import>,
    expressions: Index::<Expression> {
        items: {
            Idx::<Expression>(0): {
                "item": "VariableRef { name: ThisModule(\"a\") }",
                "range": "12..14",
            },
            Idx::<Expression>(1): {
                "item": "VariableRef { name: ThisModule(\"b\") }",
                "range": "16..17",
            },
            Idx::<Expression>(2): {
                "item": "Binary { op: Add, lhs: Idx::<Expression>(0), rhs: Idx::<Expression>(1) }",
                "range": "12..17",
            },
            Idx::<Expression>(3): {
                "item": "Lambda { args: [Idx::<Pattern>(2)], body: Idx::<Expression>(2) }",
                "range": "0..17",
            },
        },
    },
    patterns: Index::<Pattern> {
        items: {
            Idx::<Pattern>(0): {
                "item": "VariableDeclaration { name: ThisModule(\"a\") }",
                "name": "a",
                "range": "2..3",
            },
            Idx::<Pattern>(1): {
                "item": "VariableDeclaration { name: ThisModule(\"b\") }",
                "name": "b",
                "range": "5..6",
            },
            Idx::<Pattern>(2): {
                "item": "Tuple(NonEmpty([Idx::<Pattern>(0), Idx::<Pattern>(1)]))",
                "range": "1..7",
            },
        },
    },
    type_references: EmptyIndex::<TypeReference>,
    scopes: Scopes {
        current_scope: Idx::<Scope>(0),
        scopes: Arena {
            len: 2,
            data: [
                Scope {
                    parent: Idx::<Scope>(0),
                },
                Scope {
                    parent: Idx::<Scope>(0),
                },
            ],
        },
    },
    warnings: [],
    errors: [],
}
[]
