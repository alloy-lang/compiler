import std::bool::Bool::True

let test = True

match test when
  | True -> 0
  | _    -> 1
===
HirModule {
    imports: Index::<Import> {
        items: {
            Idx::<Import>(0): {
                "item": "Import { segments: [\"std\", \"bool\", \"Bool\"], last: \"True\" }",
                "name": "True",
                "range": "0..30",
            },
        },
    },
    expressions: Index::<Expression> {
        items: {
            Idx::<Expression>(0): {
                "item": "VariableRef { name: ThisModule(\"True\") }",
                "name": "test",
                "range": "30..47",
            },
            Idx::<Expression>(1): {
                "item": "VariableRef { name: ThisModule(\"test\") }",
                "range": "53..58",
            },
            Idx::<Expression>(2): {
                "item": "IntLiteral(0)",
                "range": "75..79",
            },
            Idx::<Expression>(3): {
                "item": "IntLiteral(1)",
                "range": "89..90",
            },
            Idx::<Expression>(4): {
                "item": "Match { condition: Idx::<Expression>(1), targets: [(Idx::<Pattern>(0), Idx::<Expression>(2)), (Idx::<Pattern>(1), Idx::<Expression>(3))] }",
                "range": "47..90",
            },
        },
    },
    patterns: Index::<Pattern> {
        items: {
            Idx::<Pattern>(0): {
                "item": "VariableRef { name: ThisModule(\"True\") }",
                "range": "67..72",
            },
            Idx::<Pattern>(1): {
                "item": "Nil",
                "range": "81..82",
            },
        },
    },
    type_references: EmptyIndex::<TypeReference>,
    scopes: Scopes {
        current_scope: Idx::<Scope>(0),
        scopes: Arena {
            len: 3,
            data: [
                Scope {
                    parent: Idx::<Scope>(0),
                },
                Scope {
                    parent: Idx::<Scope>(0),
                },
                Scope {
                    parent: Idx::<Scope>(0),
                },
            ],
        },
    },
    warnings: [],
    errors: [],
}
[]
