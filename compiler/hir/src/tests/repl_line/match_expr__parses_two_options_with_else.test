let test = True

match test when
  | True -> 0
  | _    -> 1
===
HirModule {
    imports: Index {
        items: Arena {
            len: 0,
            data: [],
        },
        item_ranges: ArenaMap {
            v: [],
            _ty: PhantomData<la_arena::Idx<alloy_hir::hir::import::Import>>,
        },
        item_names: {},
    },
    expressions: Index {
        items: Arena {
            len: 5,
            data: [
                VariableRef {
                    name: ThisModule(
                        Name(
                            "True",
                        ),
                    ),
                },
                VariableRef {
                    name: ThisModule(
                        Name(
                            "test",
                        ),
                    ),
                },
                IntLiteral(
                    0,
                ),
                IntLiteral(
                    1,
                ),
                Match {
                    condition: Idx::<Expression>(1),
                    targets: [
                        (
                            Idx::<Pattern>(0),
                            Idx::<Expression>(2),
                        ),
                        (
                            Idx::<Pattern>(1),
                            Idx::<Expression>(3),
                        ),
                    ],
                },
            ],
        },
        item_ranges: ArenaMap {
            v: [
                Some(
                    0..17,
                ),
                Some(
                    23..28,
                ),
                Some(
                    45..49,
                ),
                Some(
                    59..60,
                ),
                Some(
                    17..60,
                ),
            ],
            _ty: PhantomData<la_arena::Idx<alloy_hir::hir::expression::Expression>>,
        },
        item_names: {
            (
                Name(
                    "test",
                ),
                Idx::<Scope>(0),
            ): Idx::<Expression>(0),
        },
    },
    patterns: Index {
        items: Arena {
            len: 2,
            data: [
                VariableRef {
                    name: ThisModule(
                        Name(
                            "True",
                        ),
                    ),
                },
                Nil,
            ],
        },
        item_ranges: ArenaMap {
            v: [
                Some(
                    37..42,
                ),
                Some(
                    51..52,
                ),
            ],
            _ty: PhantomData<la_arena::Idx<alloy_hir::hir::pattern::Pattern>>,
        },
        item_names: {
            (
                Name(
                    "True",
                ),
                Idx::<Scope>(0),
            ): Idx::<Pattern>(0),
        },
    },
    type_annotations: {},
    types: Arena {
        len: 0,
        data: [],
    },
    type_ranges: ArenaMap {
        v: [],
        _ty: PhantomData<la_arena::Idx<alloy_hir::hir::type::Type>>,
    },
    scopes: Scopes {
        current_scope: Idx::<Scope>(0),
        scopes: Arena {
            len: 1,
            data: [
                Scope {
                    parent: Idx::<Scope>(0),
                },
            ],
        },
    },
    warnings: [],
    errors: [
        LoweringError {
            kind: UnknownReference {
                path: ThisModule(
                    Name(
                        "True",
                    ),
                ),
            },
            range: 11..17,
        },
    ],
}
[]
