import std::bool::Bool::True

let test = True

match test when
  | True -> 0
  | _    -> 1
===
HirModule {
    imports: Index {
        items: Arena {
            len: 1,
            data: [
                Import {
                    segments: [
                        Name(
                            "std",
                        ),
                        Name(
                            "bool",
                        ),
                        Name(
                            "Bool",
                        ),
                    ],
                    last: Name(
                        "True",
                    ),
                },
            ],
        },
        item_ranges: ArenaMap {
            v: [
                Some(
                    0..30,
                ),
            ],
            _ty: PhantomData<la_arena::Idx<alloy_hir::hir::import::Import>>,
        },
        item_names: {
            (
                Name(
                    "True",
                ),
                Idx::<Scope>(0),
            ): Idx::<Import>(0),
        },
    },
    expressions: Index {
        items: Arena {
            len: 5,
            data: [
                VariableRef {
                    name: ThisModule(
                        Name(
                            "True",
                        ),
                    ),
                },
                VariableRef {
                    name: ThisModule(
                        Name(
                            "test",
                        ),
                    ),
                },
                IntLiteral(
                    0,
                ),
                IntLiteral(
                    1,
                ),
                Match {
                    condition: Idx::<Expression>(1),
                    targets: [
                        (
                            Idx::<Pattern>(0),
                            Idx::<Expression>(2),
                        ),
                        (
                            Idx::<Pattern>(1),
                            Idx::<Expression>(3),
                        ),
                    ],
                },
            ],
        },
        item_ranges: ArenaMap {
            v: [
                Some(
                    30..47,
                ),
                Some(
                    53..58,
                ),
                Some(
                    75..79,
                ),
                Some(
                    89..90,
                ),
                Some(
                    47..90,
                ),
            ],
            _ty: PhantomData<la_arena::Idx<alloy_hir::hir::expression::Expression>>,
        },
        item_names: {
            (
                Name(
                    "test",
                ),
                Idx::<Scope>(0),
            ): Idx::<Expression>(0),
        },
    },
    patterns: Index {
        items: Arena {
            len: 2,
            data: [
                VariableRef {
                    name: ThisModule(
                        Name(
                            "True",
                        ),
                    ),
                },
                Nil,
            ],
        },
        item_ranges: ArenaMap {
            v: [
                Some(
                    67..72,
                ),
                Some(
                    81..82,
                ),
            ],
            _ty: PhantomData<la_arena::Idx<alloy_hir::hir::pattern::Pattern>>,
        },
        item_names: {},
    },
    type_references: Index {
        items: Arena {
            len: 0,
            data: [],
        },
        item_ranges: ArenaMap {
            v: [],
            _ty: PhantomData<la_arena::Idx<alloy_hir::hir::type_reference::TypeReference>>,
        },
        item_names: {},
    },
    scopes: Scopes {
        current_scope: Idx::<Scope>(0),
        scopes: Arena {
            len: 3,
            data: [
                Scope {
                    parent: Idx::<Scope>(0),
                },
                Scope {
                    parent: Idx::<Scope>(0),
                },
                Scope {
                    parent: Idx::<Scope>(0),
                },
            ],
        },
    },
    warnings: [],
    errors: [],
}
[]
