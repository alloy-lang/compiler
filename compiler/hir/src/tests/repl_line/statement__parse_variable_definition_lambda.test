let add = |a, b| -> a + b
===
HirModule {
    imports: EmptyIndex::<Import>,
    expressions: Index::<Expression> {
        Idx::<Expression>(0): {
            "item": VariableRef {
                name: ThisModule(
                    "a",
                ),
            },
            "range": 20..22,
        },
        Idx::<Expression>(1): {
            "item": VariableRef {
                name: ThisModule(
                    "b",
                ),
            },
            "range": 24..25,
        },
        Idx::<Expression>(2): {
            "item": Binary {
                op: Add,
                lhs: Idx::<Expression>(0),
                rhs: Idx::<Expression>(1),
            },
            "range": 20..25,
        },
        Idx::<Expression>(3): {
            "item": Lambda {
                args: [
                    Idx::<Pattern>(0),
                    Idx::<Pattern>(1),
                ],
                body: Idx::<Expression>(2),
            },
            "name": "add",
            "range": 0..25,
            "scope_id": Idx::<Scope>(0),
        },
    },
    patterns: Index::<Pattern> {
        Idx::<Pattern>(0): {
            "item": VariableDeclaration {
                name: "a",
            },
            "name": "a",
            "range": 11..12,
            "scope_id": Idx::<Scope>(1),
        },
        Idx::<Pattern>(1): {
            "item": VariableDeclaration {
                name: "b",
            },
            "name": "b",
            "range": 14..15,
            "scope_id": Idx::<Scope>(1),
        },
    },
    type_references: EmptyIndex::<TypeReference>,
    type_definitions: EmptyIndex::<TypeDefinition>,
    scopes: Scopes {
        current_scope: Idx::<Scope>(0),
        scopes: Arena {
            len: 2,
            data: [
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "root",
                },
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "lambda expression",
                },
            ],
        },
    },
    warnings: [],
    errors: [],
}
[]
