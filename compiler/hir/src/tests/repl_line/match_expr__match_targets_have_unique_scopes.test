import std::either::Either
import test

match test when
  \ Either::Left(x)  -> x
  \ Either::Right(x) -> x
===
HirModule {
    imports: Index::<Import> {
        Idx::<Import>(0): {
            "item": Import {
                segments: [
                    "std",
                    "either",
                ],
                last: "Either",
            },
            "name": "Either",
            "range": 0..27,
            "scope_id": Idx::<Scope>(0),
        },
        Idx::<Import>(1): {
            "item": Import {
                segments: [],
                last: "test",
            },
            "name": "test",
            "range": 27..40,
            "scope_id": Idx::<Scope>(0),
        },
    },
    expressions: Index::<Expression> {
        Idx::<Expression>(0): {
            "item": VariableRef {
                name: ThisModule(
                    "test",
                ),
            },
            "range": 46..51,
        },
        Idx::<Expression>(1): {
            "item": VariableRef {
                name: ThisModule(
                    "x",
                ),
            },
            "range": 80..84,
        },
        Idx::<Expression>(2): {
            "item": VariableRef {
                name: ThisModule(
                    "x",
                ),
            },
            "range": 106..107,
        },
        Idx::<Expression>(3): {
            "item": Match {
                condition: Idx::<Expression>(0),
                targets: [
                    (
                        Idx::<Pattern>(1),
                        Idx::<Expression>(1),
                    ),
                    (
                        Idx::<Pattern>(3),
                        Idx::<Expression>(2),
                    ),
                ],
            },
            "range": 40..107,
        },
    },
    patterns: Index::<Pattern> {
        Idx::<Pattern>(0): {
            "item": VariableDeclaration {
                name: ThisModule(
                    "x",
                ),
            },
            "name": "x",
            "range": 73..74,
            "scope_id": Idx::<Scope>(1),
        },
        Idx::<Pattern>(1): {
            "item": Destructure {
                target: OtherModule(
                    Fqn {
                        module: NonEmpty(
                            [
                                "Either",
                            ],
                        ),
                        name: "Left",
                    },
                ),
                args: [
                    Idx::<Pattern>(0),
                ],
            },
            "range": 60..77,
        },
        Idx::<Pattern>(2): {
            "item": VariableDeclaration {
                name: ThisModule(
                    "x",
                ),
            },
            "name": "x",
            "range": 100..101,
            "scope_id": Idx::<Scope>(2),
        },
        Idx::<Pattern>(3): {
            "item": Destructure {
                target: OtherModule(
                    Fqn {
                        module: NonEmpty(
                            [
                                "Either",
                            ],
                        ),
                        name: "Right",
                    },
                ),
                args: [
                    Idx::<Pattern>(2),
                ],
            },
            "range": 86..103,
        },
    },
    type_references: EmptyIndex::<TypeReference>,
    type_definitions: EmptyIndex::<TypeDefinition>,
    scopes: Scopes {
        current_scope: Idx::<Scope>(0),
        scopes: Arena {
            len: 3,
            data: [
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "root",
                },
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "match expression arm",
                },
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "match expression arm",
                },
            ],
        },
    },
    warnings: [],
    errors: [],
}
[]
