typeof test : t1 -> Int -> String where
    typevar t1
    typevar t1
===
HirModule {
    imports: EmptyIndex::<Import>,
    expressions: EmptyIndex::<Expression>,
    patterns: EmptyIndex::<Pattern>,
    type_references: Index::<TypeReference> {
        Idx::<TypeReference>(0): {
            "item": Named(
                ThisModule(
                    NonEmpty(
                        [
                            "t1",
                        ],
                    ),
                ),
            ),
            "range": 14..17,
        },
        Idx::<TypeReference>(1): {
            "item": BuiltIn(
                Int,
            ),
            "range": 20..24,
        },
        Idx::<TypeReference>(2): {
            "item": BuiltIn(
                String,
            ),
            "range": 27..34,
        },
        Idx::<TypeReference>(3): {
            "item": Lambda {
                arg_type: Idx::<TypeReference>(1),
                return_type: Idx::<TypeReference>(2),
            },
            "range": 20..34,
        },
        Idx::<TypeReference>(4): {
            "item": Lambda {
                arg_type: Idx::<TypeReference>(0),
                return_type: Idx::<TypeReference>(3),
            },
            "name": "test",
            "range": 14..34,
            "scope_id": Idx::<Scope>(0),
        },
    },
    type_definitions: Index::<TypeDefinition> {
        Idx::<TypeDefinition>(0): {
            "item": TypeDefinition {
                name: "t1",
                kind: TypeVariable(
                    Unbound,
                ),
            },
            "name": "t1",
            "range": 44..59,
            "scope_id": Idx::<Scope>(1),
        },
        Idx::<TypeDefinition>(1): {
            "item": TypeDefinition {
                name: "t1",
                kind: TypeVariable(
                    Unbound,
                ),
            },
            "range": 59..69,
        },
    },
    scopes: Scopes {
        current_scope: Idx::<Scope>(0),
        scopes: Arena {
            len: 2,
            data: [
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "root",
                },
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "type annotation",
                },
            ],
        },
    },
    warnings: [],
    errors: [
        LoweringError {
            kind: ConflictingTypeVariableName {
                name: "t1",
                first: 44..59,
                second: 59..69,
            },
            range: 59..69,
        },
    ],
}
[]
