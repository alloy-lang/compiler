import test_data::Test

typeof test1
typeof test2 : Test -> String -> Int
===
HirModule {
    imports: Index::<Import> {
        Idx::<Import>(0): {
            "item": Import {
                segments: [
                    "test_data",
                ],
                last: "Test",
            },
            "name": "Test",
            "range": 0..24,
            "scope_id": Idx::<Scope>(0),
        },
    },
    expressions: EmptyIndex::<Expression>,
    patterns: EmptyIndex::<Pattern>,
    type_references: Index::<TypeReference> {
        Idx::<TypeReference>(0): {
            "item": Missing,
            "name": "test1",
            "range": 24..37,
            "scope_id": Idx::<Scope>(0),
        },
        Idx::<TypeReference>(1): {
            "item": Named(
                OtherModule(
                    Fqn {
                        module: NonEmpty(
                            [
                                "test_data",
                            ],
                        ),
                        name: "Test",
                        sub_path: [],
                    },
                ),
            ),
            "range": 52..57,
        },
        Idx::<TypeReference>(2): {
            "item": BuiltIn(
                String,
            ),
            "range": 60..67,
        },
        Idx::<TypeReference>(3): {
            "item": BuiltIn(
                Int,
            ),
            "range": 70..73,
        },
        Idx::<TypeReference>(4): {
            "item": Lambda {
                arg_type: Idx::<TypeReference>(2),
                return_type: Idx::<TypeReference>(3),
            },
            "range": 60..73,
        },
        Idx::<TypeReference>(5): {
            "item": Lambda {
                arg_type: Idx::<TypeReference>(1),
                return_type: Idx::<TypeReference>(4),
            },
            "name": "test2",
            "range": 52..73,
            "scope_id": Idx::<Scope>(0),
        },
    },
    type_definitions: EmptyIndex::<TypeDefinition>,
    scopes: Scopes {
        current_scope: Idx::<Scope>(0),
        scopes: Arena {
            len: 3,
            data: [
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "root",
                },
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "type annotation",
                },
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "type annotation",
                },
            ],
        },
    },
    warnings: [],
    errors: [],
}
[
    ParseError {
        expected: [
            Colon,
        ],
        kind: Missing {
            offset: 37,
        },
        context: TypeOfColon,
    },
    ParseError {
        expected: [
            Ident,
            LParen,
        ],
        kind: Missing {
            offset: 37,
        },
        context: TypeOfType,
    },
]
