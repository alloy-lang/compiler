let add1 = |a, 9| -
let add2 = |a, b| -> a + b
===
HirModule {
    imports: EmptyIndex::<Import>,
    expressions: Index::<Expression> {
        Idx::<Expression>(0): {
            "item": Missing,
            "range": 11..20,
        },
        Idx::<Expression>(1): {
            "item": Lambda {
                args: [
                    Idx::<Pattern>(0),
                    Idx::<Pattern>(1),
                ],
                body: Idx::<Expression>(0),
            },
            "name": "add1",
            "range": 0..20,
            "scope_id": Idx::<Scope>(0),
        },
        Idx::<Expression>(2): {
            "item": VariableRef {
                path: ThisModule(
                    NonEmpty(
                        [
                            "a",
                        ],
                    ),
                ),
                scope: Idx::<Scope>(2),
            },
            "range": 41..43,
        },
        Idx::<Expression>(3): {
            "item": VariableRef {
                path: ThisModule(
                    NonEmpty(
                        [
                            "b",
                        ],
                    ),
                ),
                scope: Idx::<Scope>(2),
            },
            "range": 45..46,
        },
        Idx::<Expression>(4): {
            "item": Binary {
                op: Add,
                lhs: Idx::<Expression>(2),
                rhs: Idx::<Expression>(3),
            },
            "range": 41..46,
        },
        Idx::<Expression>(5): {
            "item": Lambda {
                args: [
                    Idx::<Pattern>(2),
                    Idx::<Pattern>(3),
                ],
                body: Idx::<Expression>(4),
            },
            "name": "add2",
            "range": 20..46,
            "scope_id": Idx::<Scope>(0),
        },
    },
    patterns: Index::<Pattern> {
        Idx::<Pattern>(0): {
            "item": VariableDeclaration {
                name: "a",
            },
            "name": "a",
            "range": 12..13,
            "scope_id": Idx::<Scope>(1),
        },
        Idx::<Pattern>(1): {
            "item": Literal(
                Int(
                    9,
                ),
            ),
            "range": 15..16,
        },
        Idx::<Pattern>(2): {
            "item": VariableDeclaration {
                name: "a",
            },
            "name": "a",
            "range": 32..33,
            "scope_id": Idx::<Scope>(2),
        },
        Idx::<Pattern>(3): {
            "item": VariableDeclaration {
                name: "b",
            },
            "name": "b",
            "range": 35..36,
            "scope_id": Idx::<Scope>(2),
        },
    },
    type_references: EmptyIndex::<TypeReference>,
    type_definitions: EmptyIndex::<TypeDefinition>,
    scopes: Scopes {
        current_scope: Idx::<Scope>(0),
        scopes: Arena {
            len: 3,
            data: [
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "root",
                },
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "lambda expression",
                },
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "lambda expression",
                },
            ],
        },
    },
    warnings: [],
    errors: [],
}
[
    ParseError {
        expected: [
            RightArrow,
        ],
        kind: Unexpected {
            found: Minus,
            range: 18..19,
        },
        context: LambdaExprRightArrow,
    },
    ParseError {
        expected: [
            Integer,
            Fraction,
            String,
            Char,
            Ident,
            OpIdent,
            Minus,
            LParen,
            IfKw,
            MatchKw,
            Pipe,
        ],
        kind: Missing {
            offset: 20,
        },
        context: LambdaExprExpr,
    },
]
