let a =
let b = a
===
HirModule {
    imports: EmptyIndex::<Import>,
    expressions: Index::<Expression> {
        Idx::<Expression>(0): {
            "item": Missing,
            "name": "a",
            "range": 0..8,
            "scope_id": Idx::<Scope>(0),
        },
        Idx::<Expression>(1): {
            "item": VariableRef {
                path: ThisModule(
                    NonEmpty(
                        [
                            "a",
                        ],
                    ),
                ),
                scope: Idx::<Scope>(0),
            },
            "name": "b",
            "range": 8..17,
            "scope_id": Idx::<Scope>(0),
        },
    },
    patterns: EmptyIndex::<Pattern>,
    type_references: EmptyIndex::<TypeReference>,
    type_definitions: EmptyIndex::<TypeDefinition>,
    scopes: Scopes {
        current_scope: Idx::<Scope>(0),
        scopes: Arena {
            len: 1,
            data: [
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "root",
                },
            ],
        },
    },
    warnings: [],
    errors: [],
}
[
    ParseError {
        expected: [
            Integer,
            Fraction,
            String,
            Char,
            Ident,
            OpIdent,
            Minus,
            LParen,
            IfKw,
            MatchKw,
            Pipe,
        ],
        kind: Missing {
            offset: 8,
        },
        context: ValueDefExpr,
    },
]
