let a (1 + 2)
let b = a
===
HirModule {
    imports: EmptyIndex::<Import>,
    expressions: Index::<Expression> {
        Idx::<Expression>(0): {
            "item": Literal(
                Int(
                    1,
                ),
            ),
            "range": 7..9,
        },
        Idx::<Expression>(1): {
            "item": Literal(
                Int(
                    2,
                ),
            ),
            "range": 11..12,
        },
        Idx::<Expression>(2): {
            "item": Binary {
                op: Add,
                lhs: Idx::<Expression>(0),
                rhs: Idx::<Expression>(1),
            },
            "name": "a",
            "range": 0..14,
            "scope_id": Idx::<Scope>(0),
        },
        Idx::<Expression>(3): {
            "item": VariableRef {
                path: ThisModule(
                    NonEmpty(
                        [
                            "a",
                        ],
                    ),
                ),
                scope: Idx::<Scope>(0),
            },
            "name": "b",
            "range": 14..23,
            "scope_id": Idx::<Scope>(0),
        },
    },
    patterns: EmptyIndex::<Pattern>,
    type_references: EmptyIndex::<TypeReference>,
    type_definitions: EmptyIndex::<TypeDefinition>,
    scopes: Scopes {
        current_scope: Idx::<Scope>(0),
        scopes: Arena {
            len: 1,
            data: [
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "root",
                },
            ],
        },
    },
    warnings: [],
    errors: [],
}
[
    ParseError {
        expected: [
            Equals,
        ],
        kind: Missing {
            offset: 6,
        },
        context: ValueDefEquals,
    },
]
