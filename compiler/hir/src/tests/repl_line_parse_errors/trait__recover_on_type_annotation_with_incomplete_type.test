trait TestTrait1 where
    typeof test1
    typeof test2 : self -> String -> Int
end
===
HirModule {
    imports: EmptyIndex::<Import>,
    expressions: EmptyIndex::<Expression>,
    patterns: EmptyIndex::<Pattern>,
    type_references: Index::<TypeReference> {
        Idx::<TypeReference>(0): {
            "item": Missing,
            "name": "test1",
            "range": 27..44,
            "scope_id": Idx::<Scope>(1),
        },
        Idx::<TypeReference>(1): {
            "item": SelfRef,
            "range": 59..64,
        },
        Idx::<TypeReference>(2): {
            "item": BuiltIn(
                String,
            ),
            "range": 67..74,
        },
        Idx::<TypeReference>(3): {
            "item": BuiltIn(
                Int,
            ),
            "range": 77..81,
        },
        Idx::<TypeReference>(4): {
            "item": Lambda {
                arg_type: Idx::<TypeReference>(2),
                return_type: Idx::<TypeReference>(3),
            },
            "range": 67..81,
        },
        Idx::<TypeReference>(5): {
            "item": Lambda {
                arg_type: Idx::<TypeReference>(1),
                return_type: Idx::<TypeReference>(4),
            },
            "name": "test2",
            "range": 59..81,
            "scope_id": Idx::<Scope>(1),
        },
    },
    type_definitions: Index::<TypeDefinition> {
        Idx::<TypeDefinition>(0): {
            "item": TypeDefinition {
                name: "TestTrait1",
                kind: Trait(
                    Trait {
                        name: "TestTrait1",
                        self_constraints: [],
                        named_type_variables: {},
                        type_annotations: {
                            "test2": Idx::<TypeReference>(5),
                            "test1": Idx::<TypeReference>(0),
                        },
                        values: {},
                    },
                ),
            },
            "name": "TestTrait1",
            "range": 0..84,
            "scope_id": Idx::<Scope>(0),
        },
    },
    scopes: Scopes {
        current_scope: Idx::<Scope>(0),
        scopes: Arena {
            len: 4,
            data: [
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "root",
                },
                Scope {
                    parent: Idx::<Scope>(0),
                    tag: "trait",
                },
                Scope {
                    parent: Idx::<Scope>(1),
                    tag: "type annotation",
                },
                Scope {
                    parent: Idx::<Scope>(1),
                    tag: "type annotation",
                },
            ],
        },
    },
    warnings: [],
    errors: [],
}
[
    ParseError {
        expected: [
            Colon,
        ],
        kind: Missing {
            offset: 44,
        },
        context: TypeOfColon,
    },
    ParseError {
        expected: [
            Ident,
            SelfKw,
            LParen,
        ],
        kind: Missing {
            offset: 44,
        },
        context: TypeOfType,
    },
]
